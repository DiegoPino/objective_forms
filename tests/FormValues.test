<?php

// $Id$

/**
 * @file
 *
 */
class ObjectiveForms_FormValues_TestCase extends DrupalUnitTestCase {

  /**
   * Get Test info.
   * 
   * @return array
   *   Properties that are displayed in the test selection form.
   */
  public static function getInfo() {
    return array(
      'name' => 'Form Values Unit Tests.',
      'description' => 'Unit tests for FormValue.inc.',
      'group' => 'Objective Forms',
    );
  }

  /**
   * setUp() performs any pre-requisite tasks that need to happen. 
   */
  public function setUp() {
    // Enable any modules required for the test.
    parent::setUp('objective_forms');
    module_load_include('inc', 'objective_forms', 'FormValues');
  }

  /**
   * Test constructing the Form definition.
   */
  public function testNoTree() {
    $form_state = array(
      'values' => array(
        'first' => '_first',
        'second' => '_second',
        'fourth' => '_fourth'
      ),
    );
    $drupal_form = array(
      'first' => array(
        '#title' => 'first',
        '#hash' => 1,
      ),
      'second' => array(
        '#title' => 'second',
        '#hash' => 2,
      ),
      'third' => array(
        '#title' => 'third',
        '#hash' => 3,
        'fourth' => array(
          '#title' => 'forth',
          '#hash' => 4,
        )
      ),
    );
    $form = new Form($drupal_form, $form_state);
    $drupal_form = $form->toArray();
    $values = new FormValues($form_state, $form->root);
    $this->assertNotNull($values, "Create FormValues.");
    $value = $values->getValue(1);
    $expected = '_first';
    $this->assertEqual($value, $expected);
    $value = $values->getValue(2);
    $expected = '_second';
    $this->assertEqual($value, $expected);
    $value = $values->getValue(3);
    $expected = NULL;
    $this->assertEqual($value, $expected);
    $value = $values->getValue(4);
    $expected = '_fourth';
    $this->assertEqual($value, $expected);
  }

  public function testTree() {
    $form_state = array(
      'values' => array(
        'first' => array(
          'second' => '_second',
          'third' => array(
            'fourth' => '_fourth'
          )
        )
      ),
    );
    $drupal_form = array(
      'first' => array(
        '#tree' => TRUE,
        '#title' => 'first',
        '#hash' => 1,
        'second' => array(
          '#title' => 'second',
          '#hash' => 2,
        ),
        'third' => array(
          '#title' => 'third',
          '#hash' => 3,
          'fourth' => array(
            '#title' => 'forth',
            '#hash' => 4,
          )
        ),
      ),
    );
    $form = new Form($drupal_form, $form_state);
    $drupal_form = $form->toArray();
    $values = new FormValues($form_state, $form->root);
    $this->assertNotNull($values, "Create FormValues.");
    $value = $values->getValue(1);
    $expected = NULL;
    $this->assertEqual($value, $expected);
    $value = $values->getValue(2);
    $expected = '_second';
    $this->assertEqual($value, $expected);
    $value = $values->getValue(3);
    $expected = NULL;
    $this->assertEqual($value, $expected);
    $value = $values->getValue(4);
    $expected = '_fourth';
    $this->assertEqual($value, $expected);
  }

}